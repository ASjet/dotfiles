# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH="/Users/sjet/Library/Python/3.9/bin:$PATH"
export PATH="/Users/sjet/Library/Python/3.9/lib/python/site-packages:$PATH"
export PATH="/Users/sjet/Library/Python/3.8/bin:$PATH"
export PATH="/Users/sjet/Library/Python/3.8/lib/python/site-packages:$PATH"
export PATH="/Users/sjet/workspace:$PATH"
export PATH="/Users/sjet/scripts:$PATH"
export PATH="/Users/sjet/bin:$PATH"
export PATH="/Users/sjet/n2t/tools:$PATH"
export SDKROOT="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
export CPATH="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/"
export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/include/opencv4:$PATH"
export PATH="/usr/local/include/eigen3:$PATH"
export PATH="/Users/sjet/Library/Boost/boost_1_75_0:$PATH"
export PATH="/Users/sjet/Library/Boost/boost_1_75_0/stage/lib:$PATH"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# NVM Source
export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node
export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs

# alias
alias g++="g++-11"
alias gcc="gcc-11"
alias zshconfig="open -a code ~/.zshrc"
alias ohmyzsh="open -a code ~/.oh-my-zsh"
alias code="open -a code"
alias vscconfig="~/Library/Application\ Support/Code/User/"
alias buildpath="~/Library/Developer/Xcode/DerivedData"
alias dev="docker exec -it dev su sjet"

# openblas is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides BLAS in Accelerate.framework.
# For compilers to find openblas you may need to set:
    export LDFLAGS="-L/usr/local/opt/openblas/lib"
    export CPPFLAGS="-I/usr/local/opt/openblas/include"

# For pkg-config to find openblas you may need to set:
# export PKG_CONFIG_PATH="/usr/local/opt/openblas/lib/pkgconfig"

# Emacs Lisp files have been installed to:
# /usr/local/share/emacs/site-lisp/protobuf

# qt is keg-only, which means it was not symlinked into /usr/local,
# because Qt 5 has CMake issues when linked.

# If you need to have qt first in your PATH run:
# echo 'export PATH="/usr/local/opt/qt/bin:$PATH"' >> ~/.zshrc
    export PATH="/usr/local/opt/qt/bin:$PATH"

# For compilers to find qt you may need to set:
    export LDFLAGS="-L/usr/local/opt/qt/lib"
    export CPPFLAGS="-I/usr/local/opt/qt/include"

# For pkg-config to find qt you may need to set:
# export PKG_CONFIG_PATH="/usr/local/opt/qt/lib/pkgconfig"

# tcl-tk is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.

# If you need to have tcl-tk first in your PATH run:
    export PATH="/usr/local/opt/tcl-tk/bin:$PATH"

# For compilers to find tcl-tk you may need to set:
    export LDFLAGS="-L/usr/local/opt/tcl-tk/lib"
    export CPPFLAGS="-I/usr/local/opt/tcl-tk/include"

# For pkg-config to find tcl-tk you may need to set:
    export PKG_CONFIG_PATH="/usr/local/opt/tcl-tk/lib/pkgconfig"

    export TK_SILENCE_DEPRECATION=1

#==> openjdk
#For the system Java wrappers to find this JDK, symlink it with
#   sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
# For the system Java wrappers to find this JDK, symlink it with
#   sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
# openjdk is keg-only, which means it was not symlinked into /usr/local,
# because it shadows the macOS `java` wrapper.
# If you need to have openjdk first in your PATH run:
#   echo 'export PATH="/usr/local/opt/openjdk/bin:$PATH"' >> ~/.zshrc
    export PATH="/usr/local/opt/openjdk/bin:$PATH"
# For compilers to find openjdk you may need to set:
#   export CPPFLAGS="-I/usr/local/opt/openjdk/include"


# ==> nvm
# Please note that upstream has asked us to make explicit managing
# nvm via Homebrew is unsupported by them and you should check any
# problems against the standard nvm install method prior to reporting.
#
# You should create NVM's working directory if it doesn't exist:
#
#   mkdir ~/.nvm
#
# Add the following to ~/.zshrc or your desired shell
# configuration file:
#
#   export NVM_DIR="$HOME/.nvm"
#   [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
#   [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
#
# You can set $NVM_DIR to any location, but leaving it unchanged from
# /usr/local/opt/nvm will destroy any nvm-installed Node installations
# upon upgrade/reinstall.
#
# Type `nvm help` for further information.

# ==> fzf
# To install useful keybindings and fuzzy completion:
# /usr/local/opt/fzf/install
# To use fzf in Vim, add the following line to your .vimrc:
# set rtp+=/usr/local/opt/fzf

# ==> openssl@1.1
# A CA file has been bootstrapped using certificates from the system
# keychain. To add additional certificates, place .pem files in
#   /usr/local/etc/openssl@1.1/certs
# and run
#   /usr/local/opt/openssl@1.1/bin/c_rehash
# openssl@1.1 is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides LibreSSL.
# If you need to have openssl@1.1 first in your PATH run:
#   echo 'export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"' >> ~/.zshrc
# For compilers to find openssl@1.1 you may need to set:
#   export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
#   export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
# For pkg-config to find openssl@1.1 you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"

# ==> readline
# readline is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides BSD libedit.
# For compilers to find readline you may need to set:
#   export LDFLAGS="-L/usr/local/opt/readline/lib"
#   export CPPFLAGS="-I/usr/local/opt/readline/include"
# For pkg-config to find readline you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/readline/lib/pkgconfig"

# ==> sqlite
# sqlite is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
# If you need to have sqlite first in your PATH run:
#   echo 'export PATH="/usr/local/opt/sqlite/bin:$PATH"' >> ~/.zshrc
# For compilers to find sqlite you may need to set:
#   export LDFLAGS="-L/usr/local/opt/sqlite/lib"
#   export CPPFLAGS="-I/usr/local/opt/sqlite/include"
# For pkg-config to find sqlite you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/sqlite/lib/pkgconfig"

# ==> python@3.8
# Python has been installed as
#   /usr/local/opt/python@3.8/bin/python3
# Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
# `python3`, `python3-config`, `pip3` etc., respectively, have been installed into
#   /usr/local/opt/python@3.8/libexec/bin
# You can install Python packages with
#   /usr/local/opt/python@3.8/bin/pip3 install <package>
# They will install into the site-package directory
#   /usr/local/lib/python3.8/site-packages
# See: https://docs.brew.sh/Homebrew-and-Python
# python@3.8 is keg-only, which means it was not symlinked into /usr/local,
# because this is an alternate version of another formula.
# If you need to have python@3.8 first in your PATH run:
#   echo 'export PATH="/usr/local/opt/python@3.8/bin:$PATH"' >> ~/.zshrc
# For compilers to find python@3.8 you may need to set:
#   export LDFLAGS="-L/usr/local/opt/python@3.8/lib"
# For pkg-config to find python@3.8 you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/python@3.8/lib/pkgconfig"

# ==> tcl-tk
# tcl-tk is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
# If you need to have tcl-tk first in your PATH run:
#   echo 'export PATH="/usr/local/opt/tcl-tk/bin:$PATH"' >> ~/.zshrc
# For compilers to find tcl-tk you may need to set:
#   export LDFLAGS="-L/usr/local/opt/tcl-tk/lib"
#   export CPPFLAGS="-I/usr/local/opt/tcl-tk/include"
# For pkg-config to find tcl-tk you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/tcl-tk/lib/pkgconfig"

# ==> openblas
# openblas is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides BLAS in Accelerate.framework.
# For compilers to find openblas you may need to set:
#   export LDFLAGS="-L/usr/local/opt/openblas/lib"
#   export CPPFLAGS="-I/usr/local/opt/openblas/include"
# For pkg-config to find openblas you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/openblas/lib/pkgconfig"

# ==> python@3.9
# Python has been installed as
#   /usr/local/bin/python3
# Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
# `python3`, `python3-config`, `pip3` etc., respectively, have been installed into
#   /usr/local/opt/python@3.9/libexec/bin
# You can install Python packages with
#   pip3 install <package>
# They will install into the site-package directory
#   /usr/local/lib/python3.9/site-packages
# See: https://docs.brew.sh/Homebrew-and-Python

# ==> libffi
# libffi is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.

# For compilers to find libffi you may need to set:
#   export LDFLAGS="-L/usr/local/opt/libffi/lib"
#   export CPPFLAGS="-I/usr/local/opt/libffi/include"

# For pkg-config to find libffi you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"

# ==> guile
# Guile libraries can now be installed here:
#     Source files: /usr/local/share/guile/site/3.0
#   Compiled files: /usr/local/lib/guile/3.0/site-ccache
#       Extensions: /usr/local/lib/guile/3.0/extensions

# Add the following to your .bashrc or equivalent:
  export GUILE_LOAD_PATH="/usr/local/share/guile/site/3.0"
  export GUILE_LOAD_COMPILED_PATH="/usr/local/lib/guile/3.0/site-ccache"
  export GUILE_SYSTEM_EXTENSIONS_PATH="/usr/local/lib/guile/3.0/extensions"

# ==> unbound
# To have launchd start unbound now and restart at startup:
#   sudo brew services start unbound

# ==> protobuf
# Emacs Lisp files have been installed to:
#   /usr/local/share/emacs/site-lisp/protobuf

# ==> qt
# We agreed to the Qt open source license for you.
# If this is unacceptable you should uninstall.
# qt is keg-only, which means it was not symlinked into /usr/local,
# because Qt 5 has CMake issues when linked.
# If you need to have qt first in your PATH run:
#   echo 'export PATH="/usr/local/opt/qt/bin:$PATH"' >> ~/.zshrc
#   export PATH="/usr/local/opt/qt/bin:$PATH"
# For compilers to find qt you may need to set:
#   export LDFLAGS="-L/usr/local/opt/qt/lib"
#   export CPPFLAGS="-I/usr/local/opt/qt/include"
# For pkg-config to find qt you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/qt/lib/pkgconfig"

#==> qt@5
#We agreed to the Qt open source license for you.
#If this is unacceptable you should uninstall.
#qt@5 is keg-only, which means it was not symlinked into /usr/local,
#because this is an alternate version of another formula.
#If you need to have qt@5 first in your PATH, run:
#  echo 'export PATH="/usr/local/opt/qt@5/bin:$PATH"' >> ~/.zshrc
#For compilers to find qt@5 you may need to set:
#  export LDFLAGS="-L/usr/local/opt/qt@5/lib"
#  export CPPFLAGS="-I/usr/local/opt/qt@5/include"
#For pkg-config to find qt@5 you may need to set:
#  export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig"


# ==> tor
# To have launchd start tor now and restart at login:
#   brew services start tor
# Or, if you don't want/need a background service you can just run:
#   tor

# ==> vapoursynth
# This formula does not contain optional filters that require extra dependencies.
# To use vapoursynth.core.sub, execute:
#   brew install vapoursynth-sub
# To use vapoursynth.core.ocr, execute:
#   brew install vapoursynth-ocr
# To use vapoursynth.core.imwri, execute:
#   brew install vapoursynth-imwri
# To use vapoursynth.core.ffms2, execute the following:
#   brew install ffms2
#   ln -s "../libffms2.dylib" "/usr/local/lib/vapoursynth/libffms2.dylib"
# For more information regarding plugins, please visit:
#   http://www.vapoursynth.com/doc/plugins.html

# Emacs
# To have launchd start emacs now and restart at login:
#   brew services start emacs
# Or, if you don't want/need a background service you can just run:
#   emacs

# ==> gdb
# gdb requires special privileges to access Mach ports.
# You will need to codesign the binary. For instructions, see:
#
#   https://sourceware.org/gdb/wiki/BuildingOnDarwin
#
# On 10.12 (Sierra) or later with SIP, you need to run this:
#
#  echo "set startup-with-shell off" >> ~/.gdbinit

# ==> ncurses
# ncurses is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.

# If you need to have ncurses first in your PATH run:
#   echo 'export PATH="/usr/local/opt/ncurses/bin:$PATH"' >> ~/.zshrc

# For compilers to find ncurses you may need to set:
#   export LDFLAGS="-L/usr/local/opt/ncurses/lib"
#   export CPPFLAGS="-I/usr/local/opt/ncurses/include"

# For pkg-config to find ncurses you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/ncurses/lib/pkgconfig"

# Neofetch
# ==> docbook
# To use the DocBook package in your XML toolchain,
# you need to add the following to your ~/.bashrc:

# export XML_CATALOG_FILES="/usr/local/etc/xml/catalog"
# ==> gnu-getopt
# gnu-getopt is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.

# If you need to have gnu-getopt first in your PATH run:
#   echo 'export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"' >> ~/.zshrc

# ==> libarchive
# libarchive is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
#
# If you need to have libarchive first in your PATH, run:
#   echo 'export PATH="/usr/local/opt/libarchive/bin:$PATH"' >> ~/.zshrc
#
# For compilers to find libarchive you may need to set:
#   export LDFLAGS="-L/usr/local/opt/libarchive/lib"
#   export CPPFLAGS="-I/usr/local/opt/libarchive/include"
#
# For pkg-config to find libarchive you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/libarchive/lib/pkgconfig"

# ==> cmake
# Emacs Lisp files have been installed to:
#   /usr/local/share/emacs/site-lisp/cmake

# ==> exa
# zsh completions have been installed to:
#   /usr/local/share/zsh/site-functions

# ==> dbus
# To have launchd start dbus now and restart at login:
#   brew services start dbus

# ==> m4
# m4 is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.
#
# If you need to have m4 first in your PATH, run
#   echo 'export PATH="/usr/local/opt/m4/bin:$PATH"' >> ~/.zshrc

# ==> libtool
# In order to prevent conflicts with Apple's own libtool we have prepended a "g"
# so, you have instead: glibtool and glibtoolize.

# ==> git
# The Tcl/Tk GUIs (e.g. gitk, git-gui) are now in the `git-gui` formula.
#
# zsh completions and functions have been installed to:
#   /usr/local/share/zsh/site-functions
# Emacs Lisp files have been installed to:
#   /usr/local/share/emacs/site-lisp/git
